private static boolean isAndroidModule(Project project) {
    boolean isAndroidLibrary = project.plugins.hasPlugin('com.android.library')
    boolean isAndroidApp = project.plugins.hasPlugin('com.android.application')
    return isAndroidLibrary || isAndroidApp
}

afterEvaluate { project ->
    if (isAndroidModule(project)) setupAndroidReporting()
    else setupKotlinReporting()
}

def setupKotlinReporting() {
    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = false
            csv.required = false
            html.outputLocation = layout.buildDirectory.dir("${buildDir}/coverage-report")
        }
    }
}

def setupAndroidReporting() {
    tasks.withType(Test) {
        // Whether or not classes without source location should be instrumented
        jacoco.includeNoLocationClasses true
        jacoco.excludes = ['jdk.internal.*']
    }
    task jacocoTestReport(
            type: JacocoReport,
            dependsOn: ['testDebugUnitTest']
    ) {
        reports {
            xml.required = false
            csv.required = false
            html.outputLocation = layout.buildDirectory.dir("${buildDir}/coverage-report")
        }
        // Change as needed
        def fileFilter = [
                '**/*App.*',
                '**/*Application.*',
                '**/*Activity.*',
                '**/*Fragment.*',
                '**/*JsonAdapter.*', // adapters generated by Moshi
                '**/di/**',
                '**/*Dagger.*'
        ]
        def debugTree = fileTree(
                dir: "$buildDir/tmp/kotlin-classes/debug",
                excludes: fileFilter
        )
        def mainSrc = "$projectDir/src/main/java"
        sourceDirectories.from = files([mainSrc])
        classDirectories.from = files([debugTree])
        executionData.from = fileTree(
                dir: project.buildDir,
                includes: [
                        'jacoco/testDebugUnitTest.exec',
                        'outputs/code-coverage/connected/*coverage.ec'
                ]
        )
    }
}


//def setupAndroidReporting() {
//    tasks.withType(Test) {
//        // Whether or not classes without source location should be instrumented
//        jacoco.includeNoLocationClasses = true
//        jacoco.excludes = ['jdk.internal.*']
//    }
//
//
//    task jacocoTestReport(
//            type: JacocoReport,
//            dependsOn: ['testDebugUnitTest']
//    ) {
//        reports {
//            csv.required = false
//            xml.required = false
//            html {
//                required = true
//                destination file("${buildDir}/coverage-report")
//            }
//        }
//
//    // Grab all build types and product flavors
//    def buildTypes = android.buildTypes.collect { type ->
//        type.name
//    }
//    def productFlavors = android.productFlavors.collect { flavor ->
//        flavor.name
//    }
//    // When no product flavors defined, use empty
//    if (!productFlavors) productFlavors.add('')
//    productFlavors.each { productFlavorName ->
//        buildTypes.each { buildTypeName ->
//            def sourceName, sourcePath
//            if (!productFlavorName) {
//                sourceName = sourcePath = "${buildTypeName}"
//            } else {
//                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
//                sourcePath = "${productFlavorName}/${buildTypeName}"
//            }
//            def testTaskName = "test${sourceName.capitalize()}UnitTest"
//            System.out.println("Task -> $testTaskName")
//
//            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
//            task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
//                group = "Reporting"
//                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."
//
//                def fileFilter = [
//                        // data binding
//                        'android/databinding/**/*.class',
//                        '**/android/databinding/*Binding.class',
//                        '**/android/databinding/*',
//                        '**/androidx/databinding/*',
//                        '**/BR.*',
//                        // android
//                        '**/R.class',
//                        '**/R$*.class',
//                        '**/BuildConfig.*',
//                        '**/Manifest*.*',
//                        '**/*Test*.*',
//                        'android/**/*.*',
//                        // kotlin
//                        '**/*MapperImpl*.*',
//                        '**/*$ViewInjector*.*',
//                        '**/*$ViewBinder*.*',
//                        '**/BuildConfig.*',
//                        '**/*Component*.*',
//                        '**/*BR*.*',
//                        '**/Manifest*.*',
//                        '**/*$Lambda$*.*',
//                        '**/*Companion*.*',
//                        '**/*Module*.*',
//                        '**/*Dagger*.*',
//                        '**/*Hilt*.*',
//                        '**/*MembersInjector*.*',
//                        '**/*_MembersInjector.class',
//                        '**/*_Factory*.*',
//                        '**/*_Provide*Factory*.*',
//                        '**/*Extensions*.*',
//                        // sealed and data classes
//                        '**/*$Result.*',
//                        '**/*$Result$*.*',
//                        // adapters generated by moshi
//                        '**/*JsonAdapter.*',
//                ]
//
//                def javaTree = fileTree(dir: "${project.buildDir}/intermediates/javac/$sourceName/classes", excludes: fileFilter)
//                def kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/$sourceName", excludes: fileFilter)
//                classDirectories.from = files([javaTree], [kotlinTree])
//                executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
//                def coverageSourceDirs = ["src/main/java",
//                                          "src/$productFlavorName/java",
//                                          "src/$buildTypeName/java"]
//
//                sourceDirectories.setFrom(files(coverageSourceDirs))
//                additionalSourceDirs.setFrom(files(coverageSourceDirs))
//
//                reports {
//                    csv.required =  false // change if needed
//                    xml.required =  false // change if needed
//                    html {
//                        required =  true
//                        destination file("${buildDir}/coverage-report")
//                    }
//                }
//            }
//        }
//    }
//}

android {
    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }
}
